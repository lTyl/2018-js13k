

var letters = letters = {
	'A': [
		[, 1],
		[1, , 1],
		[1, , 1],
		[1, 1, 1],
		[1, , 1]
	],
	'B': [
		[1, 1],
		[1, , 1],
		[1, 1, 1],
		[1, , 1],
		[1, 1]
	],
	'C': [
		[1, 1, 1],
		[1],
		[1],
		[1],
		[1, 1, 1]
	],
	'D': [
		[1, 1],
		[1, , 1],
		[1, , 1],
		[1, , 1],
		[1, 1]
	],
	'E': [
		[1, 1, 1],
		[1],
		[1, 1, 1],
		[1],
		[1, 1, 1]
	],
	'F': [
		[1, 1, 1],
		[1],
		[1, 1],
		[1],
		[1]
	],
	'G': [
		[, 1, 1],
		[1],
		[1, , 1, 1],
		[1, , , 1],
		[, 1, 1]
	],
	'H': [
		[1, , 1],
		[1, , 1],
		[1, 1, 1],
		[1, , 1],
		[1, , 1]
	],
	'I': [
		[1, 1, 1],
		[, 1],
		[, 1],
		[, 1],
		[1, 1, 1]
	],
	'J': [
		[1, 1, 1],
		[, , 1],
		[, , 1],
		[1, , 1],
		[1, 1, 1]
	],
	'K': [
		[1, , , 1],
		[1, , 1],
		[1, 1],
		[1, , 1],
		[1, , , 1]
	],
	'L': [
		[1],
		[1],
		[1],
		[1],
		[1, 1, 1]
	],
	'M': [
		[1, 1, 1, 1, 1],
		[1, , 1, , 1],
		[1, , 1, , 1],
		[1, , , , 1],
		[1, , , , 1]
	],
	'N': [
		[1, , , 1],
		[1, 1, , 1],
		[1, , 1, 1],
		[1, , , 1],
		[1, , , 1]
	],
	'O': [
		[1, 1, 1],
		[1, , 1],
		[1, , 1],
		[1, , 1],
		[1, 1, 1]
	],
	'P': [
		[1, 1, 1],
		[1, , 1],
		[1, 1, 1],
		[1],
		[1]
	],
	'Q': [
		[0, 1, 1],
		[1, , , 1],
		[1, , , 1],
		[1, , 1, 1],
		[1, 1, 1, 1]
	],
	'R': [
		[1, 1],
		[1, , 1],
		[1, , 1],
		[1, 1],
		[1, , 1]
	],
	'S': [
		[1, 1, 1],
		[1],
		[1, 1, 1],
		[, , 1],
		[1, 1, 1]
	],
	'T': [
		[1, 1, 1],
		[, 1],
		[, 1],
		[, 1],
		[, 1]
	],
	'U': [
		[1, , 1],
		[1, , 1],
		[1, , 1],
		[1, , 1],
		[1, 1, 1]
	],
	'V': [
		[1, , , , 1],
		[1, , , , 1],
		[, 1, , 1],
		[, 1, , 1],
		[, , 1]
	],
	'W': [
		[1, , , , 1],
		[1, , , , 1],
		[1, , , , 1],
		[1, , 1, , 1],
		[1, 1, 1, 1, 1]
	],
	'X': [
		[1, , , , 1],
		[, 1, , 1],
		[, , 1],
		[, 1, , 1],
		[1, , , , 1]
	],
	'Y': [
		[1, , 1],
		[1, , 1],
		[, 1],
		[, 1],
		[, 1]
	],
	'Z': [
		[1, 1, 1, 1, 1],
		[, , , 1],
		[, , 1],
		[, 1],
		[1, 1, 1, 1, 1]
	],
	'0': [
		[1, 1, 1],
		[1, , 1],
		[1, , 1],
		[1, , 1],
		[1, 1, 1]
	],
	'1': [
		[, 1],
		[, 1],
		[, 1],
		[, 1],
		[, 1]
	],
	'2': [
		[1,1,1],
		[0,0,1],
		[1,1,1],
		[1,0,0],
		[1,1,1]
	],
	'3':[
		[1,1,1],
		[0,0,1],
		[1,1,1],
		[0,0,1],
		[1,1,1]
	],
	'4':[
		[1,0,1],
		[1,0,1],
		[1,1,1],
		[0,0,1],
		[0,0,1]
	],
	'5':[
		[1,1,1],
		[1,0,0],
		[1,1,1],
		[0,0,1],
		[1,1,1]
	],
	'6':[
		[1,1,1],
		[1,0,0],
		[1,1,1],
		[1,0,1],
		[1,1,1]
	],
	'7':[
		[1,1,1],
		[0,0,1],
		[0,0,1],
		[0,0,1],
		[0,0,1]
	],
	'8':[
		[1,1,1],
		[1,0,1],
		[1,1,1],
		[1,0,1],
		[1,1,1]
	],
	'9':[
		[1,1,1],
		[1,0,1],
		[1,1,1],
		[0,0,1],
		[1,1,1]
	],
	' ': [
		[, ,],
		[, ,],
		[, ,],
		[, ,],
		[, ,]
	]
};

class Text extends Entity {
	constructor(x, y, o = {}){
		super(x, y, o);
		
		this.hasCollision = 0;
		this.size = o.size;
		this.string = o.text;
	}
	
	draw(){
		let needed = [];
		this.string = this.string.toUpperCase(); // because I only did uppercase letters
		for (let i = 0; i < this.string.length; i++) {
			var letter = letters[this.string.charAt(i)];
			if (letter) { // because there's letters I didn't do
				needed.push(letter);
			}
		}
		
		ctx.fillStyle = 'black';
		let currX = this.x;
		for (let i = 0; i < needed.length; i++) {
			letter = needed[i];
			let currY = this.y;
			let addX = 0;
			for (let y = 0; y < letter.length; y++) {
				let row = letter[y];
				for (let x = 0; x < row.length; x++) {
					if (row[x]) {
						ctx.fillRect(currX + x * this.size, currY, this.size, this.size);
					}
				}
				addX = Math.max(addX, row.length * this.size);
				currY += this.size;
			}
			currX += this.size + addX;
		}
	}
}
